name: Node.js CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  syntax-check:
    runs-on: Agent-1
    strategy:
      matrix:
        node-version: [18.19.1]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Frontend Compilation (JS Syntax Check)
        run: |
          cd frontend
          find . -name "*.js" -exec node --check {} +

      - name: Backend Compilation (JS Syntax Check)
        run: |
          cd backend
          find . -name "*.js" -exec node --check {} +

  gitleaks-scan:
    runs-on: Agent-1
    needs: syntax-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run GitLeaks Scan
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source . --redact --exit-code 1 --report-path=gitleaks-report.json

  trivy-scan:
    runs-on: Agent-1
    needs: gitleaks-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Trivy FS Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: .
          format: 'table'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  sonar-frontend:
    runs-on: ubuntu-latest
    needs: trivy-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'   # SonarQube requires Node 16+ for JS/TS analysis

      - name: SonarQube Scan (Frontend)
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: frontend
          args: >
            -Dsonar.projectKey=myorg_frontend
            -Dsonar.projectName=myorg_frontend
            -Dsonar.sources=.
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
            -Dsonar.nodejs.executable=$(which node)
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  sonar-backend:
    runs-on: ubuntu-latest
    needs: sonar-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: SonarQube Scan (Backend)
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: backend
          args: >
            -Dsonar.projectKey=myorg_backend
            -Dsonar.projectName=myorg_backend
            -Dsonar.sources=.
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
            -Dsonar.nodejs.executable=$(which node)
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  docker-build-and-push:
    runs-on: ubuntu-latest
    needs: sonar-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Frontend Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/myorg-frontend:${{ github.sha }} ./frontend

      - name: Build Backend Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/myorg-backend:${{ github.sha }} ./backend

      - name: Trivy Scan Frontend Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/myorg-frontend:${{ github.sha }}
          format: 'table'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Trivy Scan Backend Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/myorg-backend:${{ github.sha }}
          format: 'table'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Push Frontend Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/myorg-frontend:${{ github.sha }}

      - name: Push Backend Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/myorg-backend:${{ github.sha }}
      # Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1   # change to your region

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Tag & Push Frontend Image to ECR
      - name: Push Frontend Image to ECR
        run: |
          docker tag ${{ secrets.DOCKER_USERNAME }}/myorg-frontend:${{ github.sha }} \
            ${{ steps.login-ecr.outputs.registry }}/myorg-frontend:${{ github.sha }}
          docker push ${{ steps.login-ecr.outputs.registry }}/myorg-frontend:${{ github.sha }}

      # Tag & Push Backend Image to ECR
      - name: Push Backend Image to ECR
        run: |
          docker tag ${{ secrets.DOCKER_USERNAME }}/myorg-backend:${{ github.sha }} \
            ${{ steps.login-ecr.outputs.registry }}/myorg-backend:${{ github.sha }}
          docker push ${{ steps.login-ecr.outputs.registry }}/myorg-backend:${{ github.sha }}
